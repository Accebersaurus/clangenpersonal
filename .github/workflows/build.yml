name: PyInstaller build

on: [push]

permissions:
  contents: write
env:
  VERSION_NAME: ${{ github.sha }}
  RELEASE_CHANNEL: ${{ vars.DEVELOPMENT_RELEASE_CHANNEL }}
  IS_RELEASE: 0


jobs:

  build-self-updater:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: selfupdater-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: selfupdater-
      - name: Build self-updater
        shell: bash
        run: |
          cd self_updater
          cargo build --release
      
      - name: Upload self-updater
        uses: actions/upload-artifact@v3
        with:
          name: self_updater
          path: self_updater/target/release/self_updater.exe
      

      - name: Configure Release
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          echo "VERSION_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.STABLE_RELEASE_CHANNEL }}" >> $GITHUB_ENV
          echo "IS_RELEASE=1" >> $GITHUB_ENV
  build:
    needs:
      - build-self-updater
    strategy:
      matrix:
        platform: [win32, win64, win10, linux2.31, linux2.35, macOS]
        include:
          - platform: win32
            os: windows-2019
            os-group: "windows"
            python-version: "3.8"
            python-arch: "x86"
            package-name: "Clangen_Win32"
            package-type: "zip"
            api-id: "win32"
            butler-id: "win32"
          - platform: win64
            os: windows-latest
            os-group: "windows"
            python-version: "3.8"
            python-arch: "x64"
            package-name: "Clangen_Win64"
            package-type: "zip"
            api-id: "win64"
            butler-id: "win64"
          - platform: win10
            os: windows-latest
            os-group: "windows"
            python-version: "3.11"
            python-arch: "x64"
            package-name: "Clangen_Win64_Windows10+"
            package-type: "zip"
            api-id: "win10+"
            butler-id: "win64_10"
          - platform: linux2.31
            os: ubuntu-20.04
            os-group: "linux"
            python-version: "3.11"
            python-arch: "x64"
            package-name: "Clangen_Linux64_glibc2.31+"
            package-type: "tar.xz"
            api-id: "linux2.31"
            butler-id: "linux64_glibc_231"
          - platform: linux2.35
            os: ubuntu-22.04
            os-group: "linux"
            python-version: "3.11"
            python-arch: "x64"
            package-name: "Clangen_Linux64_glibc2.35+"
            package-type: "tar.xz"
            api-id: "linux2.35"
            butler-id: "linux64_glibc_235"
          - platform: macOS
            os: macos-13
            os-group: "macOS"
            python-version: "3.11"
            python-arch: "x64"
            package-name: "Clangen_macOS64"
            package-type: "dmg"
            api-id: "macOS"
            butler-id: "osx64"

    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref, 'ref/heads/release') }}
    env:
      gpg_private_key: ${{ secrets.PACKAGESIGNKEY }}
      gpg_private_key_passphrase: ${{ secrets.PACKAGESIGNKEYPASSPHRASE }}
      update_api_push_token: ${{ secrets.UPDATE_API_DEPLOY_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.7.1
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.python-arch }}
          cache: "poetry"
      - name: install dependencies
        run: poetry install --with build --all-extras --no-root
      - name: Write version file
        run: poetry run python3 utils/version.py -v ${{ env.VERSION_NAME }} -r ${{ env.RELEASE_CHANNEL }} -u ${{ github.repository }}
      # This only runs on development builds, please write release commits manually
      - name: Write commit file
        if: ${{ env.IS_RELEASE != 1 }}
        run: |
          git log --pretty="format:%H|||%cd|||%b|||%s" -15 --no-decorate --merges --grep="Merge pull request" --date=short > changelog.txt
      
      - name: Download self updater
        if: ${{ matrix.os-group == 'windows' }}
        uses: actions/download-artifact@v3
        with:
          name: self_updater
          path: resources/self_updater.exe
      - name: Run PyInstaller
        run: poetry run python3 -m PyInstaller Clangen.spec
        env:
          IS_RELEASE: ${{ env.IS_RELEASE == 1 }}
      - name: Copy itch.toml
        if: ${{ matrix.os-group == 'windows' }}
        run: cp dist/Clangen/_internal/.itch.toml dist/
      - name: Install appdmg
        if: ${{ matrix.os-group == 'macOS' }}
        run: npm install -g appdmg
      - name: Create archive
        if: ${{ matrix.os-group != 'macOS' }}
        run: tar -caf ${{ matrix.package-name }}.${{ matrix.package-type }} -C dist Clangen
      - name: Create archive
        if: ${{ matrix.os-group == 'macOS' }}
        run: |
          rm -rf dist/Clangen
          appdmg appdmg.json ${{ matrix.package-name }}.${{ matrix.package-type }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package-name }}
          path: ${{ matrix.package-name }}.${{ matrix.package-type }}
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        if: ${{ env.gpg_private_key != '' && env.gpg_private_key_passphrase != '' }}
        with:
          gpg_private_key: ${{ secrets.PACKAGESIGNKEY }}
          passphrase: ${{ secrets.PACKAGESIGNKEYPASSPHRASE }}
      - name: Upload artifact to API
        if: ${{ env.update_api_push_token != '' }}
        run: |
          gpg --output ${{ matrix.package-name }}.${{ matrix.package-type }}.sig --detach-sig -a ${{ matrix.package-name }}.${{ matrix.package-type }}
          curl -X 'POST' \
            'https://clangen.io/api/v1/Update/Channels/${{ env.RELEASE_CHANNEL }}/Releases/${{ env.VERSION_NAME }}/Appoint' \
            -H 'X-API-Key: ${{ secrets.UPDATE_API_DEPLOY_KEY }}' \
            -H 'accept: */*'
          curl -X 'PUT' \
            'https://clangen.io/api/v1/Update/Channels/${{ env.RELEASE_CHANNEL }}/Releases/${{ env.VERSION_NAME }}/Artifacts/${{ matrix.api-id }}' \
            -H 'X-API-Key: ${{ secrets.UPDATE_API_DEPLOY_KEY }}' \
            -H 'accept: */*' \
            -H 'Content-Type: multipart/form-data' \
            -F 'fileBundle=@${{ matrix.package-name }}.${{ matrix.package-type }}' \
            -F 'fileBundle=@${{ matrix.package-name }}.${{ matrix.package-type }}.sig' \
            --http1.1
      - name: Set up butler
        if: env.IS_RELEASE == 1 && env.BUTLER_API_KEY != ''
        uses: jdno/setup-butler@v1
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      - name: Upload build to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
        if: ${{ env.IS_RELEASE == 1 && env.BUTLER_API_KEY != '' }}
        run: butler push ${{ matrix.package-name }}.${{ matrix.package-type }} sablesteel/clan-gen-fan-edit:${{ matrix.butler-id }} --userversion "${{ env.VERSION_NAME }}"
      - name: Release
        uses: softprops/action-gh-release@v1
        if: ${{ env.IS_RELEASE == 1 }}
        with:
          files: ${{ matrix.package-name }}.${{ matrix.package-type }}